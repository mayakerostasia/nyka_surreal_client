[
  {
    "id": 1,
    "text": "USE NS test;\r\nUSE DB test;\r\n# EVENT TABLE\r\n# -----------\r\nDEFINE TABLE event SCHEMAFULL\r\n# PERMISSIONS <here>\r\n;\r\nDEFINE FIELD info ON event FLEXIBLE TYPE object;\r\nDEFINE FIELD eventType ON event TYPE string;\r\n# ----------\r\n\r\n# ISSUE TABLE\r\n# -----------\r\nDEFINE TABLE issue SCHEMAFULL\r\n# PERMISSIONS <here>\r\n;\r\nDEFINE FIELD issue_id ON issue TYPE string;\r\nDEFINE FIELD data ON issue FLEXIBLE TYPE option<object>;\r\nDEFINE FIELD creation_event ON issue TYPE option<record>;\r\nDEFINE FIELD last_update ON issue TYPE option<record>;\r\n# ----------\r\n\r\n## LINK TABLE\r\n## ---------- \r\nDEFINE TABLE belongsTo SCHEMAFULL\r\n# PERMISSIONS <here>\r\n;\r\nDEFINE FIELD in ON belongsTo TYPE record<event>;\r\nDEFINE FIELD out ON belongsTo TYPE record<issue>;\r\n## ----------\r\n\r\nDEFINE FUNCTION fn::newEvent($issue_id: string, $info: object, $event_type: string) {\r\n\r\n    LET $id = type::thing(\"issue\", $issue_id);\r\n        \r\n    LET $issue = (SELECT id FROM $id);\r\n\r\n    IF !$issue {\r\n        CREATE $id \r\n        SET issue_id = $issue_id;\r\n    };\r\n    \r\n    LET $event = ( \r\n        CREATE ONLY type::thing(\"event\", [$issue[0].id, time::now()]) \r\n        SET \r\n            info = $info,\r\n            eventType = $event_type\r\n    );        \r\n    \r\n    RELATE ($event.id)->belongsTo->($issue.id);\r\n      \r\n    RETURN \r\n    \"Issue ID=\"+<string> $id + \" \" +\r\n    \"Issue=\"+<string> $issue + \" \" +\r\n    \"Event=\"+<string> $event + \" \" #+\r\n    ;\r\n};"
  },
  {
    "id": 2,
    "text": "BEGIN TRANSACTION;\r\nDELETE event;\r\nDELETE issue;\r\nDELETE belongsTo;\r\nCOMMIT TRANSACTION;"
  },
  {
    "id": 7,
    "text": "--all events related to their respective issues\r\nSELECT \r\n    *, \r\n    <-belongsTo<-event AS events \r\nFROM issue\r\nLIMIT 10\r\n;\r\n"
  },
  {
    "id": 8,
    "text": "LET $query = (\r\nSELECT\r\n    *,\r\n    # <-belongsTo<-event WHERE \r\n#     ( \r\n#         SELECT \r\n#             *\r\n#             OMIT info\r\n#         FROM \r\n#             <-belongsTo<-event\r\n#         WHERE eventType = \"IssueCreated\"\r\n#     \r\n#     ) as creation_event,\r\n    (\r\n        SELECT\r\n            id,\r\n            #*,\r\n            #info.issue.fields.*,# OMIT info.issue.fields, /* OMIT info.changelog, info.issue.fields,*/\r\n            info.issue.fields.summary as Summary,\r\n            info.issue.fields.customfield_10002[0].name as CustomerName,\r\n            #info.issue.fields.customfield_10080 as SLLink,\r\n            info.issue.fields.project.name as Project,\r\n            info.issue.fields.issuetype.name as IssueType,\r\n            info.issue.fields.status.name as Status\r\n        FROM <-belongsTo<-event\r\n        WHERE\r\n            eventType = \"IssueUpdated\"\r\n        ORDER BY id DESC\r\n        LIMIT 1\r\n    ) as last_update\r\nFROM \r\n    issue\r\nWHERE\r\n    <-belongsTo<-event.*.eventType CONTAINS \"IssueUpdated\" \r\n    AND \"SD\" IN <string> <-belongsTo<-event.id[0].*.issue_id\r\n    #AND \"SOAR\" IN <string> <-belongsTo<-event.id[0].*.issue_id\r\n# FETCH last_update[0].id\r\n     #CONTAINS \"SD\"\r\nLIMIT 1\r\n);\r\n\r\nRETURN count($query);\r\n\r\nRETURN $query;\r\n"
  },
  {
    "id": 9,
    "text": "LET $sd = ( \r\n    SELECT id FROM issue WHERE issue_id CONTAINS \"SD\"\r\n);\r\n\r\n# array::first($sd.id);\r\n\r\n\"SD\" IN <string> array::first($sd.id);"
  },
  {
    "id": 10,
    "text": "LET $query = (\r\nSELECT\r\n    *,\r\n    <-belongsTo<-event[WHERE eventType = \"IssueCreated\"].id as created,\r\n    <-belongsTo<-event[WHERE eventType = \"IssueUpdated\"].id as updates,\r\n    <-belongsTo<-event[WHERE eventType = \"CommentCreated\"].id as comments\r\nFROM \r\n    issue\r\nWHERE\r\n    \"SOAR\" IN <string> <-belongsTo<-event.id[0].*.issue_id\r\n);\r\n\r\nRETURN count($query);\r\n\r\nRETURN $query;\r\n"
  },
  {
    "id": 11,
    "text": "## Get All Comments\r\n\r\nLET $query = (\r\nSELECT\r\n    *,\r\n    <-belongsTo<-event[WHERE eventType = \"CommentCreated\"].id as comment_ids,\r\n    <-belongsTo<-event[WHERE eventType = \"CommentCreated\"].info.comment.body as comments,\r\n    <-belongsTo<-event[WHERE eventType = \"CommentCreated\"].info.issue.self as api_link\r\nFROM \r\n    issue\r\nWHERE\r\n    <-belongsTo<-event[WHERE eventType = \"CommentCreated\"].id\r\n);\r\n\r\nRETURN count($query);\r\n\r\nRETURN $query;\r\n"
  },
  { "id": 12, "text": "SELECT\r\n    *\r\nFROM\r\n    issue\r\n;" },
  { "id": 1, "text": "DELETE webhook_event;" },
  {
    "id": 2,
    "text": "SELECT\r\n    # *,\r\n    # changelog,\r\n    issue_event_type_name,\r\n    changelog.items[*].field,\r\n    changelog.items[*].fieldId,\r\n    issue.fields.customfield_10150,\r\n    issue.key,\r\n    issue.fields.summary\r\nFROM webhook_event\r\nWHERE issue\r\n# LIMIT 10\r\nSPLIT issue_event_type_name"
  },
  {
    "id": 4,
    "text": "SELECT\r\n    # *,\r\n    # changelog,\r\n    issue_event_type_name,\r\n    # changelog.items[*].field,\r\n    # changelog.items[*].fieldId,\r\n    issue.fields.customfield_10150,\r\n    issue.key,\r\n    issue.fields.summary,\r\n    time::from::millis(timestamp)\r\nFROM webhook_event\r\nWHERE issue_event_type_name contains \"updated\"\r\n# LIMIT 100\r\n# SPLIT issue_event_type_name"
  },
  { "id": 5, "text": "SELECT\r\n    *\r\n    FROM\r\n    web" },
  {
    "id": 1,
    "text": "DEFINE FUNCTION fn::get_all_contracts() {\r\n    let $contracts = (\r\n            SELECT\r\n                *,\r\n                companyID,\r\n                contractName,\r\n                endDate,\r\n                (\r\n                    SELECT \r\n                        (->onService->service)[WHERE \"-\" IN name][0].name as name,\r\n                        endDate,\r\n                        units\r\n                    FROM <-onContract<-contract_unit\r\n                    GROUP BY name, units, endDate\r\n                )[WHERE name] as units\r\n            FROM\r\n                contract\r\n            ORDER BY contractName ASC\r\n            FETCH\r\n                <-onContract<-contract_unit\r\n            PARALLEL\r\n    );\r\n    RETURN $contracts\r\n};\r\n        \r\nDEFINE FUNCTION fn::get_contract($short_name: string) {\r\n#     THROW $short_name;\r\n    let $contracts = (\r\n            SELECT\r\n                *,\r\n                companyID,\r\n                contractName,\r\n                endDate,\r\n                (\r\n                    SELECT \r\n                        (->onService->service)[WHERE \"-\" IN name][0].name as name,\r\n                        endDate,\r\n                        units\r\n                    FROM <-onContract<-contract_unit\r\n                    GROUP BY name, units, endDate\r\n                )[WHERE name] as units\r\n            FROM\r\n                contract\r\n            WHERE\r\n                string::contains(contractName, $short_name)\r\n            ORDER BY contractName ASC\r\n            FETCH\r\n                <-onContract<-contract_unit\r\n            PARALLEL\r\n    );\r\n    RETURN $contracts\r\n}\r\n        \r\n"
  },
  {
    "id": 2,
    "text": "        # <-onContract<-contract_unit.serviceID) as service_ids,\r\n        let $contracts = (\r\n            SELECT \r\n                companyID,\r\n                contractName,\r\n                endDate,\r\n                {\r\n                    \"service\": <-onContract<-contract_unit->onService->service ,\r\n                    \"contract_unit\": <-onContract<-contract_unit\r\n                } as contract_units\r\n            FROM\r\n                contract\r\n            WHERE\r\n                \"-\" in ((<-onContract<-contract_unit)[0]->onService->service)[0].name\r\n            ORDER BY contractName ASC\r\n            FETCH \r\n                contract_units.service,\r\n                contract_units.contract_unit\r\n                #<-onContract<-contract_unit\r\n        );\r\n        \r\n        RETURN $contracts\r\n"
  },
  {
    "id": 3,
    "text": "        # <-onContract<-contract_unit.serviceID) as service_ids,\r\n        let $contracts = (\r\n            SELECT\r\n                #*,\r\n                companyID,\r\n                contractName,\r\n                endDate,\r\n                <-onContract<-contract_unit as contract_unit,\r\n                (\r\n                    SELECT \r\n                        (->onService->service)[WHERE \"-\" IN name][0].name as name,\r\n                        units\r\n                    FROM contract_unit\r\n                    GROUP BY name, units\r\n                )[WHERE name] as units\r\n            FROM\r\n                contract\r\n            WHERE\r\n                \"-\" in ((<-onContract<-contract_unit)[0]->onService->service)[0].name\r\n            ORDER BY contractName ASC\r\n            FETCH\r\n                contract_unit\r\n            PARALLEL\r\n        );\r\n        \r\n        RETURN $contracts\r\n"
  },
  {
    "id": 4,
    "text": "fn::get_all_contracts();\r\nfn::get_contract(\"ABNC\")"
  },
  {
    "id": 5,
    "text": "LET $all_six_twelve = (SELECT\r\n    *,\r\n    units,\r\n    ->onContract->contract as contract\r\n    # ->onService->service as service\r\n\r\nFROM contract_unit\r\nWHERE\r\n    serviceID = 612\r\nFETCH contract );\r\n\r\nLET $my_units = SELECT \r\n    units\r\nfrom \r\n    $all_six_twelve;\r\n\r\nLET $count = math::sum($my_units.units)\r\n\r\nRETURN $all_six_twelve\r\nRETURN $my_units\r\nRETURN $count"
  },
  {
    "id": 1,
    "text": "USE NS nico;\r\nUSE DB rs_jira_webhooks;\r\n# EVENT TABLE\r\n# -----------\r\nDEFINE TABLE event SCHEMAFULL\r\n# PERMISSIONS <here>\r\n;\r\nDEFINE FIELD info ON event FLEXIBLE TYPE object;\r\nDEFINE FIELD eventType ON event TYPE string;\r\n# ----------\r\n\r\n# ISSUE TABLE\r\n# -----------\r\nDEFINE TABLE issue SCHEMAFULL\r\n# PERMISSIONS <here>\r\n;\r\nDEFINE FIELD issue_id ON issue TYPE string;\r\nDEFINE FIELD data ON issue FLEXIBLE TYPE option<object>;\r\nDEFINE FIELD creation_event ON issue TYPE option<record>;\r\nDEFINE FIELD last_update ON issue TYPE option<record>;\r\n# ----------\r\n\r\n## LINK TABLE\r\n## ---------- \r\nDEFINE TABLE belongsTo SCHEMAFULL\r\n# PERMISSIONS <here>\r\n;\r\nDEFINE FIELD in ON belongsTo TYPE record<event>;\r\nDEFINE FIELD out ON belongsTo TYPE record<issue>;\r\n## ----------\r\n\r\nDEFINE FUNCTION fn::newEvent($issue_id: string, $info: object, $event_type: string) {\r\n\r\n    LET $id = type::thing(\"issue\", $issue_id);\r\n        \r\n    LET $issue = (SELECT id FROM $id);\r\n\r\n    IF !$issue {\r\n        CREATE $id \r\n        SET issue_id = $issue_id;\r\n    };\r\n    \r\n    LET $event = ( \r\n        CREATE ONLY type::thing(\"event\", [$issue[0].id, time::now()]) \r\n        SET \r\n            info = $info,\r\n            eventType = $event_type\r\n    );        \r\n    \r\n    RELATE ($event.id)->belongsTo->($issue.id);\r\n      \r\n    RETURN \r\n    \"Issue ID=\"+<string> $id + \" \" +\r\n    \"Issue=\"+<string> $issue + \" \" +\r\n    \"Event=\"+<string> $event + \" \" #+\r\n    ;\r\n};\r\n"
  },
  {
    "id": 2,
    "text": "--all events related to their respective issues\r\nSELECT \r\n    *, \r\n    <-belongsTo<-event AS events \r\nFROM issue\r\nLIMIT 10\r\n;\r\n"
  },
  {
    "id": 3,
    "text": "INFO FOR ROOT;\r\nINFO FOR NS;\r\nINFO FOR DB;\r\n\r\n"
  },
  {
    "id": 4,
    "text": "LET $query = (\r\nSELECT\r\n    *,\r\n    <-belongsTo<-event[WHERE eventType = \"IssueCreated\"].id as created,\r\n    <-belongsTo<-event[WHERE eventType = \"IssueUpdated\"].id as updates,\r\n    <-belongsTo<-event[WHERE eventType = \"CommentCreated\"].id as comments\r\nFROM \r\n    issue\r\nWHERE\r\n    \"SOAR\" IN <string> <-belongsTo<-event.id[0].*.issue_id\r\nFETCH updates\r\n);\r\n\r\nRETURN count($query);\r\n\r\nRETURN $query;\r\n"
  },
  { "id": 5, "text": "SELECT \r\n*\r\nFROM \r\n    issue" },
  {
    "id": 1,
    "text": "INFO FOR ROOT;\r\nINFO FOR NS;\r\nINFO FOR DB;\r\nINFO FOR TABLE test_table;\r\nSELECT * FROM test_table;"
  },
  {
    "id": 1,
    "text": "INFO FOR ROOT;\r\nINFO FOR NS;\r\nINFO FOR DB;\r\n\r\n# DELETE test_table WHERE id != \"test_person\";"
  },
  { "id": 2, "text": "DELETE test_table;" },
  { "id": 3, "text": "SELECT * FROM ckb;" },
  {
    "id": 1,
    "text": "INFO FOR ROOT;\r\nINFO FOR NS;\r\nINFO FOR DB;\r\n\r\n# DELETE test_table WHERE id != \"test_person\";"
  },
  {
    "id": 2,
    "text": "#SELECT * FROM ckb;\r\n\r\nSELECT\r\n    Customer, \r\n    ( SELECT * from Graylog_Alerts where Customer.short_name = \"AT\") as alerts\r\nFROM ckb\r\nWHERE Customer.name = \"Adams Township\";"
  }
]
